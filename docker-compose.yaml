

services:
  # =========================
  # PostgreSQL Database
  # ========================
  postgres:
    image: postgres:15
    container_name: postgres_lib
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_lib:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    # healthcheck:  # ‚úÖ ƒê·ª£i PostgreSQL th·ª±c s·ª± ready
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 10s

  # # =========================
  # # Alembic Migration Service
  # # =========================
  migration:
    build:
      context: ./backend/shared
      dockerfile: Dockerfile
    container_name: alembic_migration
    command: >
      sh -c "
        echo '‚è≥ Waiting for Postgres...';
        until nc -z postgres 5432; do
          echo 'üîÑ PostgreSQL not ready yet...';
          sleep 3;
        done;
        echo '‚úÖ PostgreSQL is ready!';
        alembic -c /app/shared/alembic.ini upgrade head
      "
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    networks:
      - app_network

  # # # =========================
  # # # User Service
  # # # =========================
  user_service:
    image: user_service
    container_name: user_service
    command: >
      sh -c "uvicorn user_service.app.main:app --host 0.0.0.0 --port 8000 --reload"
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - migration
    networks:
      - app_network

  book_service:
    image: book_service
    container_name: book_service
    command: >
      sh -c "
        echo '‚è≥ Waiting for Kafka...';
        until nc -z kafka 9092; do
          echo 'üîÑ Kafka not ready yet...';
          sleep 5;
        done;
        echo '‚úÖ Kafka port is open!';
        # Ch·ªù th√™m v√†i gi√¢y ƒë·ªÉ Kafka th·ª±c s·ª± s·∫µn s√†ng
        sleep 30;
        uvicorn book_service.app.main:app --host 0.0.0.0 --port 8001 --reload
      "
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - migration
      - kafka
    networks:
      - app_network

  borrow_service:
    image: borrow_service
    container_name: borrow_service
    command: >
      sh -c "
        echo '‚è≥ Waiting for Kafka...';
        until nc -z kafka 9092; do
          echo 'üîÑ Kafka not ready yet...';
          sleep 5;
        done;
        echo '‚úÖ Kafka port is open!';
        # Ch·ªù th√™m v√†i gi√¢y ƒë·ªÉ Kafka th·ª±c s·ª± s·∫µn s√†ng
        sleep 30;
        uvicorn borrow_service.app.main:app --host 0.0.0.0 --port 8002 --reload
      "
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - migration
      - kafka
    networks:
      - app_network

  notification_service:
    image: notification_service
    container_name: notification_service
    command: >
      sh -c "
        echo '‚è≥ Waiting for Kafka...';
        until nc -z kafka 9092; do
          echo 'üîÑ Kafka not ready yet...';
          sleep 5;
        done;
        echo '‚úÖ Kafka port is open!';
        # Ch·ªù th√™m v√†i gi√¢y ƒë·ªÉ Kafka th·ª±c s·ª± s·∫µn s√†ng
        sleep 30;
        uvicorn notification_service.app.main:app --host 0.0.0.0 --port 8003 --reload
      "
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    ports:
      - "8003:8003"
    depends_on:
      - postgres
      - migration
      - kafka
    networks:
      - app_network
  

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1

      # Listener cho client v√† controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092


      # Ch·∫ø ƒë·ªô KRaft (kh√¥ng c·∫ßn ZooKeeper)
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      CLUSTER_ID: "febd9c64-861f-4759-826e-8d8bdb980b5a"

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

      # C·∫•u h√¨nh hi·ªáu nƒÉng
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_HEAP_OPTS: "-Xms512M -Xmx1G"
      KAFKA_CONTROLLER_QUORUM_REQUEST_TIMEOUT_MS: 10000
      KAFKA_BROKER_HEARTBEAT_INTERVAL_MS: 3000
      KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS: 10000
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824

      # Gi·∫£m spam log v·ªÅ performance monitor
      KAFKA_LOG4J_LOGGERS: "org.apache.kafka.controller.EventPerformanceMonitor=warn"


    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - app_network



# =========================
# Volumes & Networks
# =========================
volumes:
  postgres_lib:
  kafka_data:
    driver: local

networks:
  app_network:
    driver: bridge

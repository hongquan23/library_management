import json
import asyncio
from aiokafka import AIOKafkaConsumer
import logging
import sys
import asyncpg
from datetime import datetime

# ----------------------------
# üîß Logging config
# ----------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)],
    force=True
)

logger = logging.getLogger(__name__)

# ----------------------------
# ‚öôÔ∏è Config
# ----------------------------
KAFKA_BROKER_URL = "kafka:9092"
POSTGRES_DSN = "postgresql://hongquan:luonghongquan@postgres/library_db"  # ‚ö†Ô∏è ch·ªânh ƒë√∫ng DB


# ----------------------------
# üíæ L∆∞u th√¥ng b√°o v√†o DB
# ----------------------------
async def save_notification(conn, user_id: int, message: str):
    try:
        await conn.execute(
            """
            INSERT INTO notifications (user_id, message, created_at, is_read)
            VALUES ($1, $2, $3, 0)
            """,
            user_id,
            message,
            datetime.now(),
        )
        logger.info(f"‚úÖ ƒê√£ l∆∞u th√¥ng b√°o cho {user_id}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è L·ªói khi l∆∞u th√¥ng b√°o: {e}")


# ----------------------------
# üéß Kafka Consumer ch·∫°y n·ªÅn
# ----------------------------
async def consume_notifications():
    logger.info("üéØ B·∫Øt ƒë·∫ßu consumer Kafka...")

    while True:
        try:
            # K·∫øt n·ªëi PostgreSQL
            pg_conn = await asyncpg.connect(POSTGRES_DSN)
            logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi PostgreSQL")

            # K·∫øt n·ªëi Kafka
            consumer = AIOKafkaConsumer(
                "borrow.approved",
                "borrow.failed",
                bootstrap_servers=KAFKA_BROKER_URL,
                value_deserializer=lambda v: json.loads(v.decode("utf-8")) if v else None,
                group_id="notification-service",
                auto_offset_reset="earliest"
            )

            await consumer.start()
            logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi Kafka v√† b·∫Øt ƒë·∫ßu l·∫Øng nghe...")

            async for msg in consumer:
                event = msg.value
                topic = msg.topic
                logger.info(f"üì• Nh·∫≠n message t·ª´ {topic}: {event}")

                member_id = event.get("member_id")
                book_id = event.get("book_id")

                # üîπ L·∫•y username
                user_row = await pg_conn.fetchrow("SELECT username FROM users WHERE id = $1", member_id)
                username = user_row["username"] if user_row else f"User {member_id}"

                # üîπ L·∫•y ti√™u ƒë·ªÅ s√°ch
                book_row = await pg_conn.fetchrow("SELECT title FROM books WHERE id = $1", book_id)
                book_title = book_row["title"] if book_row else f"S√°ch ID {book_id}"

                # üîπ T·∫°o th√¥ng b√°o
                if topic == "borrow.approved":
                    message = f"{username} ƒë√£ m∆∞·ª£n s√°ch '{book_title}' th√†nh c√¥ng!"
                elif topic == "borrow.failed":
                    reason = "s√°ch ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n h·∫øt"  # Gi·∫£ s·ª≠ l√Ω do c·ªë ƒë·ªãnh
                    message = f"{username} m∆∞·ª£n s√°ch '{book_title}' th·∫•t b·∫°i! L√Ω do: {reason}"
                else:
                    continue

                await save_notification(pg_conn, member_id, message)

        except Exception as e:
            logger.error(f"üí• L·ªói consumer: {e}")
            logger.info("üîÅ Th·ª≠ k·∫øt n·ªëi l·∫°i sau 10 gi√¢y...")
            await asyncio.sleep(10)
        finally:
            try:
                await consumer.stop()
                await pg_conn.close()
            except Exception:
                pass
